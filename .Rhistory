## Bernie Parisi 6-25-18
## 6-25-18 Revised Young Family, Young Couple, Empty Nester Logic
#setwd("~/Desktop/Contract/TKI/data/Neustar")
# read in data files
## data <- read.csv("merged 29625.csv")
# data <- read.csv('merge_05401.csv',sep='|',stringsAsFactors=FALSE)
# data <- read.csv('merge_50026.csv',sep='|',stringsAsFactors=FALSE)
# data <- read.csv('merge_18018.csv',sep='|',stringsAsFactors=FALSE)
# data <- read.csv('merge_18040.csv',sep='|',stringsAsFactors=FALSE)
# data <- read.csv('merge_50266.csv',sep='|',stringsAsFactors=FALSE)
# data <- read.csv('merge_78258.csv',sep='|',stringsAsFactors=FALSE)
# data <- read.csv('merge_78259.csv',sep='|',stringsAsFactors=FALSE)
# data <- read.csv('listed_merged_data_2/ZIP_05401/part-00000-b23fde6c-952e-422d-86d4-006fbb26bbec-c000.csv',sep='|',stringsAsFactors=FALSE)
# data <- read.csv('merge_29601.csv',sep='|',stringsAsFactors=FALSE)
# get sold date for unlisted
data$sold <- substring(data$SALETRANSDATE,1,10)
data$sold.time <- Sys.Date() - as.Date(as.character(data$sold),'%Y-%m-%d')
data$recently.sold <- 0
data$recently.sold[data$sold.time <= 360] <- 1
# replace blank with NA for Property ID
data$OB_PROPERTY_ID[data$OB_PROPERTY_ID == ""] <- NA
# separate unlisted from listed/recently sold
#unlist <- subset(data, is.na(data$PRICE) | data$recently.sold ==0)   # unlisted properties
#list <- subset(data, data$PRICE > 0 | data$recently.sold == 1)  # listed / recently sold properties
# list <- subset(data, data$OB_PROPERTY_ID != "" | data$recently.sold == 1)          # listed / recently sold properties
# unlist <- subset(data, data$OB_PROPERTY_ID == "" & data$recently.sold == 0)          # unlisted properties
list <- data[!is.na(data$OB_PROPERTY_ID) | data$recently.sold == 1,]          # listed / recently sold properties
unlist <- data[is.na(data$OB_PROPERTY_ID) & data$recently.sold == 0,]            # unlisted properties
# make zip code a factor
# in unlist data, add leading zero to zip code when needed
unlist$ZIP <- unlist$Field_10
unlist$ZIP[which(nchar(unlist$ZIP)==4)] <- paste0('0',unlist$ZIP[which(nchar(unlist$ZIP)==4)])
unlist$zip.factor <- factor(unlist$ZIP)
unlist.zip.vec <- levels(unlist$zip.factor)
# drop properties from listed file with zip codes not present in unlisted file
list$ZIP[which(nchar(list$ZIP)==4)] <- paste0('0',list$ZIP[which(nchar(list$ZIP)==4)])
list <- subset(list,list$ZIP %in% unlist.zip.vec)
list$zip.factor <- factor(list$ZIP)
# create a vector of zip codes in each data set
list.zip.vec <- levels(list$zip.factor)
# for recently sold, pull variables from unlisted data
list$AVM[list$recently.sold == 1] <- list$AVMVALUE[list$recently.sold == 1]
list$LAST_PURCHASE_PRICE[list$recently.sold == 1] <- list$SALEAMT[list$recently.sold == 1]
list$BATHS[list$recently.sold == 1] <- list$BATHSTOTAL[list$recently.sold == 1]
list$SQFT[list$recently.sold == 1] <- list$BLDGSIZE[list$recently.sold == 1]
list$ADDRESS_LINE1[list$recently.sold == 1] <- list$ADDRLINE1[list$recently.sold == 1]
list$CITY[list$recently.sold == 1] <- list$ADDRLOCALITY[list$recently.sold == 1]
list$STATE[list$recently.sold == 1] <- list$ADDRCOUNTRYSUBD[list$recently.sold == 1]
# set a flag for pos equity
unlist$pos.equity[(as.numeric(unlist$AVMVALUE) - as.numeric(unlist$SALEAMT)) > 0] <- 'Pos'
unlist$pos.equity[(as.numeric(unlist$AVMVALUE) - as.numeric(unlist$SALEAMT)) < 0] <- 'Neg'
unlist$pos.equity[unlist$SALEAMT == '0'] <- NA
list$pos.equity[as.numeric(list$AVM) > as.numeric(list$LAST_PURCHASE_PRICE)] <- 'Pos'
list$pos.equity[as.numeric(list$LAST_PURCHASE_PRICE) > as.numeric(list$AVM)] <- 'Neg'
list$pos.equity[list$LAST_PURCHASE_PRICE == '0' | is.na(list$LAST_PURCHASE_PRICE)==1 |
list$AVM == '0' | is.na(list$AVM)==1] <- NA
# convert relevant home size variables to numeric
unlist$BEDS <- as.numeric(unlist$BEDS)
unlist$BATHSTOTAL <- as.numeric(unlist$BATHSTOTAL)
unlist$BLDGSIZE <- as.numeric(unlist$BLDGSIZE)
list$BEDS <- as.numeric(list$BEDS)
list$BATHS <- as.numeric(list$BATHS)
list$SQFT <- as.numeric(list$SQFT)
# define home size - S, M, L - based on beds, baths or sqft
unlist$home.size[unlist$BEDS %in% c(1,2)] <- 'S'
unlist$home.size[unlist$BEDS %in% c(3,4)] <- 'M'
unlist$home.size[unlist$BEDS > 4] <- 'L'
unlist$home.size[is.na(unlist$home.size) & unlist$BATHSTOTAL <= 2] <- 'S'
unlist$home.size[is.na(unlist$home.size) & unlist$BATHSTOTAL > 2 & unlist$BATHSTOTAL <= 3] <- 'M'
unlist$home.size[is.na(unlist$home.size) & unlist$BATHSTOTAL > 3] <- 'L'
list$home.size[list$BEDS %in% c(1,2)] <- 'S'
list$home.size[list$BEDS %in% c(3,4)] <- 'M'
list$home.size[list$BEDS > 4] <- 'L'
list$home.size[is.na(list$home.size) & list$BATHS <= 2] <- 'S'
list$home.size[is.na(list$home.size) & list$BATHS > 2 & list$BATHS <= 3] <- 'M'
list$home.size[is.na(list$home.size) & list$BATHS > 3] <- 'L'
# set cutoffs for home size based on percentile in sqft by zip - use unlisted data
small <- vector(mode="numeric",length(unlist.zip.vec))
medium <- vector(mode="numeric",length(unlist.zip.vec))
# drop zeros from SQFT
unlist$BLDGSIZE[unlist$BLDGSIZE == 0] <- NA
for (i in 1:length(unlist.zip.vec)) {
small[i] <- quantile(unlist$BLDGSIZE[unlist$ZIP == unlist.zip.vec[i]],.33,na.rm=TRUE)
medium[i] <- quantile(unlist$BLDGSIZE[unlist$ZIP == unlist.zip.vec[i]],.66,na.rm=TRUE)
}
home.size <- data.frame(cbind(unlist.zip.vec,small,medium))
names(home.size) <- c('ZIP','Small','Medium')
home.size$Small <- as.numeric(as.character(home.size$Small))
home.size$Medium <- as.numeric(as.character(home.size$Medium))
# assign home size for any homes with no info on beds or baths by sqft
unlist <- merge(unlist,home.size,by="ZIP")
unlist$home.size[is.na(unlist$home.size) & unlist$BLDGSIZE < unlist$Small] <- 'S'
unlist$home.size[is.na(unlist$home.size) & unlist$BLDGSIZE > unlist$Small & unlist$SQFT < unlist$Medium] <- 'M'
unlist$home.size[is.na(unlist$home.size) & unlist$BLDGSIZE > unlist$Medium] <- 'L'
list <- merge(list,home.size,by="ZIP")
list$home.size[is.na(list$home.size) & list$BLDGSIZE < list$Small] <- 'S'
list$home.size[is.na(list$home.size) & list$BLDGSIZE > list$Small & list$SQFT < list$Medium] <- 'M'
list$home.size[is.na(list$home.size) & list$BLDGSIZE > list$Medium] <- 'L'
# define profiles and assign to each data set
# Field_301 = Number_of_Adults_in_Living_Unit
# Field_304 = Number_of_Children_in_Living_Unit
# Field_458 = Children_Presence_of_Child_0_18_Version_3
# Field_181 = Exact_Age_Member_1
# Field_182 = Estimated_Age_Member_1
# Field_196 = Exact_Age_Member_2
# Field_197 = Estimated_Age_Member_2
# Field_211 = Exact_Age_Member_3
# Field_212 = Estimated_Age_Member_3
# retirement age
# no children and at least one adult > 65
unlist$retired <- 0
unlist$retired[unlist$Field_301 %in% c(1,2) &
unlist$Field_458 != '5Y' & unlist$Field_458 != '1Y' &
unlist$Field_304 == 0 &
(unlist$Field_181 > 65 | unlist$Field_182 > 65 |
unlist$Field_196 > 65 | unlist$Field_197 > 65)] <- 1
list$retired <- 0
list$retired[list$Field_301 %in% c(1,2) &
list$Field_458 != '5Y' & list$Field_458 != '1Y' &
list$Field_304 == 0 &
(list$Field_181 > 65 | list$Field_182 > 65 |
list$Field_196 > 65 | list$Field_197 > 65)] <- 1
# young couples, no kids
# 2 adults & no children & at least one adult < 35
# 6-25-18 Edited to remove adults over 40 years old
unlist$young.couple <- 0
unlist$young.couple[unlist$Field_458 != '5Y' & unlist$Field_458 != '1Y' &
unlist$Field_304 == 0 & (unlist$Field_301 == 2 &
((unlist$Field_181 > 17 & unlist$Field_181 < 35) |
(unlist$Field_182 > 17 & unlist$Field_182 < 35)) &
(unlist$Field_196 > 17 & unlist$Field_196 < 35) |
(unlist$Field_197 > 17 & unlist$Field_197 < 35) &
(unlist$Field_181 < 40 &
unlist$Field_182 < 40 &
unlist$Field_196 < 40 &
unlist$Field_197 < 40)) |
(unlist$Field_301 == 1 &
((unlist$Field_181 > 17 & unlist$Field_181 < 35) |
(unlist$Field_182 > 17 & unlist$Field_182 < 35)) )] <- 1
list$young.couple <- 0
list$young.couple[list$Field_458 != '5Y' & list$Field_458 != '1Y' &
list$Field_304 == 0 & (list$Field_301 == 2 &
((list$Field_181 > 17 & list$Field_181 < 35) |
(list$Field_182 > 17 & list$Field_182 < 35)) &
(list$Field_196 > 17 & list$Field_196 < 35) |
(list$Field_197 > 17 & list$Field_197 < 35) &
(list$Field_181 < 40 &
list$Field_182 < 40 &
list$Field_196 < 40 &
list$Field_197 < 40))|
(list$Field_301 == 1 &
((list$Field_181 > 17 & list$Field_181 < 35) |
(list$Field_182 > 17 & list$Field_182 < 35)) )] <- 1
# Field_459 = Children_Age_0_3_Version_3
# Field_462 = Children_Age_4_6_Version_3
# Field_465 =  Children_Age_7_9_Version_3
# Field_468 = Children_Age_10_12_Version_3
# Field_471 = Children_Age_13_15_Version_3
# Field_474 = Children_Age_16_18_Version_3
# young family -- kids under 7
# 6-25-18 Edited to remove families with children in the older 4 age ranges
unlist$young.family <- 0
unlist$young.family[unlist$Field_301 %in% c(1,2) &
unlist$Field_304 > 0 &
!(unlist$Field_465 %in% c('1Y',"5Y")|
unlist$Field_468 %in% c('1Y',"5Y") |
unlist$Field_471 %in% c('1Y',"5Y") |
unlist$Field_474 %in% c('1Y',"5Y")) &
(unlist$Field_459 %in% c('1Y','5Y') |
unlist$Field_462 %in% c('1Y','5Y'))] <- 1
list$young.family <- 0
list$young.family[list$Field_301 %in% c(1,2) &
list$Field_304 > 0 &
!(list$Field_465 %in% c('1Y',"5Y") |
list$Field_468 %in% c('1Y',"5Y") |
list$Field_471 %in% c('1Y',"5Y") |
list$Field_474 %in% c('1Y',"5Y")) &
(list$Field_459 %in% c('1Y','5Y') |
list$Field_462 %in% c('1Y','5Y'))] <- 1
# school age children -- 1 or more children age 7 - 15
unlist$school.age <- 0
unlist$school.age[unlist$Field_301 %in% c(1,2) &
unlist$Field_304 > 0 &
(unlist$Field_465 %in% c('1Y','5Y') |
unlist$Field_468 %in% c('1Y','5Y') |
unlist$Field_471 %in% c('1Y','5Y'))] <- 1
list$school.age <- 0
list$school.age[list$Field_301 %in% c(1,2) &
list$Field_304 > 0 &
(list$Field_465 %in% c('1Y','5Y') |
list$Field_468 %in% c('1Y','5Y') |
list$Field_471 %in% c('1Y','5Y'))] <- 1
# empty nesters -- 3 or more adults, 1 or more btw age 16 - 24
# added 4/13/18 - any children aged 16-18
# 6-25-18 Exclude homes with any children aged 0-15
unlist$empty.nesters <- 0
unlist$empty.nesters[unlist$Field_301 >= 3 &
!(unlist$Field_459 %in% c('1Y',"5Y")) &
!(unlist$Field_462 %in% c('1Y',"5Y")) &
!(unlist$Field_465 %in% c('1Y',"5Y")) &
!(unlist$Field_468 %in% c('1Y',"5Y")) &
!(unlist$Field_471 %in% c('1Y',"5Y")) &
((unlist$Field_181 > 16 & unlist$Field_181 < 26) |
(unlist$Field_182 > 16 & unlist$Field_182 < 26) |
(unlist$Field_196 > 16 & unlist$Field_196 < 26) |
(unlist$Field_197 > 16 & unlist$Field_197 < 26) |
(unlist$Field_211 > 16 & unlist$Field_211 < 26) |
(unlist$Field_212 > 16 & unlist$Field_212 < 26))
| unlist$Field_474 %in% c('1Y','5Y')] <- 1
list$empty.nesters <- 0
list$empty.nesters[list$Field_301 >= 3 &
!(list$Field_459 %in% c('1Y',"5Y")) &
!(list$Field_462 %in% c('1Y',"5Y")) &
!(list$Field_465 %in% c('1Y',"5Y")) &
!(list$Field_468 %in% c('1Y',"5Y")) &
!(list$Field_471 %in% c('1Y',"5Y")) &
((list$Field_181 > 16 & list$Field_181 < 26) |
(list$Field_182 > 16 & list$Field_182 < 26) |
(list$Field_196 > 16 & list$Field_196 < 26) |
(list$Field_197 > 16 & list$Field_197 < 26) |
(list$Field_211 > 16 & list$Field_211 < 26) |
(list$Field_212 > 16 & list$Field_212 < 26))
| list$Field_474 %in% c('1Y','5Y')] <- 1
# find proportion of each profile in each zip, standard error of proportions and proportion in listed properties only
# use unlisted for overall proportions and standard error
p.retired.all <- vector(mode="numeric",length(unlist.zip.vec))
p.young.couple.all <- vector(mode="numeric",length(unlist.zip.vec))
p.young.family.all <- vector(mode="numeric",length(unlist.zip.vec))
p.school.age.all <- vector(mode="numeric",length(unlist.zip.vec))
p.empty.nesters.all <- vector(mode="numeric",length(unlist.zip.vec))
se.retired <- vector(mode="numeric",length(unlist.zip.vec))
se.young.couple <- vector(mode="numeric",length(unlist.zip.vec))
se.young.family <- vector(mode="numeric",length(unlist.zip.vec))
se.school.age <- vector(mode="numeric",length(unlist.zip.vec))
se.empty.nesters <- vector(mode="numeric",length(unlist.zip.vec))
p.retired.listed <- vector(mode="numeric",length(list.zip.vec))
p.young.couple.listed <- vector(mode="numeric",length(list.zip.vec))
p.young.family.listed <- vector(mode="numeric",length(list.zip.vec))
p.school.age.listed <- vector(mode="numeric",length(list.zip.vec))
p.empty.nesters.listed <- vector(mode="numeric",length(list.zip.vec))
for (i in 1:length(unlist.zip.vec)) {
p.retired.all[i] <- (length(which(unlist$ZIP == unlist.zip.vec[i] & unlist$retired == 1) == 1)
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
p.young.couple.all[i] <- (length(which(unlist$ZIP == unlist.zip.vec[i] & unlist$young.couple == 1) == 1)
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
p.young.family.all[i] <- (length(which(unlist$ZIP == unlist.zip.vec[i] & unlist$young.family == 1) == 1)
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
p.school.age.all[i] <- (length(which(unlist$ZIP == unlist.zip.vec[i] & unlist$school.age == 1) == 1)
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
p.empty.nesters.all[i] <- (length(which(unlist$ZIP == unlist.zip.vec[i] & unlist$empty.nesters == 1) == 1)
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
se.retired[i] <- sqrt((p.retired.all[i]*(1-p.retired.all[i]))
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
se.young.couple[i] <- sqrt((p.young.couple.all[i]*(1-p.young.couple.all[i]))
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
se.young.family[i] <- sqrt((p.young.family.all[i]*(1-p.young.family.all[i]))
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
se.school.age[i] <- sqrt((p.school.age.all[i]*(1-p.school.age.all[i]))
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
se.empty.nesters[i] <- sqrt((p.empty.nesters.all[i]*(1-p.empty.nesters.all[i]))
/ length(which(unlist$ZIP == unlist.zip.vec[i]) ==1))
}
for (i in 1:length(list.zip.vec)) {
p.retired.listed[i] <- (length(which(list$ZIP == list.zip.vec[i] & list$retired == 1))
/ length(which(list$ZIP == list.zip.vec[i])))
p.young.couple.listed[i] <- (length(which(list$ZIP == list.zip.vec[i] & list$young.couple == 1))
/ length(which(list$ZIP == list.zip.vec[i])))
p.young.family.listed[i] <- (length(which(list$ZIP == list.zip.vec[i] & list$young.family == 1))
/ length(which(list$ZIP == list.zip.vec[i])))
p.school.age.listed[i] <- (length(which(list$ZIP == list.zip.vec[i] & list$school.age == 1))
/ length(which(list$ZIP == list.zip.vec[i])))
p.empty.nesters.listed[i] <- (length(which(list$ZIP == list.zip.vec[i] & list$empty.nesters == 1))
/ length(which(list$ZIP == list.zip.vec[i])))
}
# create data frame of proportions and lead thresholds in each zip for output
p.all.vec <- c(p.retired.all,p.young.couple.all,p.young.family.all,p.school.age.all,p.empty.nesters.all)
p.listed.vec <- c(p.retired.listed,p.young.couple.listed,p.young.family.listed,p.school.age.listed,p.empty.nesters.listed)
se.vec <- c(se.retired,se.young.couple,se.young.family,se.school.age,se.empty.nesters)
unlist.zip.vec2 <- rep(unlist.zip.vec,times=5)
list.zip.vec2 <- rep(list.zip.vec,times=5)
profile.vec <- c(rep('Retired',times=length(unlist.zip.vec)),rep('Young Couple',times=length(unlist.zip.vec)),
rep('Young Family',times=length(unlist.zip.vec)),rep('School Age',times=length(unlist.zip.vec)),
rep('Empty Nesters',times=length(unlist.zip.vec)))
lead.thresholds <- data.frame(cbind(unlist.zip.vec2,profile.vec,p.all.vec,p.listed.vec,se.vec))
names(lead.thresholds) <- c('Zip','Profile','p.all','p.listed','se')
lead.thresholds$p.all <- as.numeric(as.character(lead.thresholds$p.all))
lead.thresholds$p.listed <- as.numeric(as.character(lead.thresholds$p.listed))
lead.thresholds$se <- as.numeric(as.character(lead.thresholds$se))
# add silver, gold and platinum labels to profiles for each zip
lead.thresholds$lead.type[lead.thresholds$p.listed >= lead.thresholds$p.all] <- 'Silver'
lead.thresholds$lead.type[lead.thresholds$p.listed > lead.thresholds$p.all + (7*lead.thresholds$se)] <- 'Gold'
lead.thresholds$lead.type[lead.thresholds$p.listed > lead.thresholds$p.all + (15*lead.thresholds$se)] <- 'Platinum'
# for each zip, determine where low (1-3) or high (4-5) school scores are trending in listed
p.low.school <- vector(mode="numeric",length(list.zip.vec))
p.high.school <- vector(mode="numeric",length(list.zip.vec))
for (i in 1:length(list.zip.vec)) {
p.low.school[i] <- (length(which(list$ZIP == list.zip.vec[i]
& list$AVG_SCHOOL_SCORE %in% c(1,2,3)))
/ length(which(list$ZIP == list.zip.vec[i])))
p.high.school[i] <- (length(which(list$ZIP == list.zip.vec[i]
& list$AVG_SCHOOL_SCORE %in% c(4,5)))
/ length(which(list$ZIP == list.zip.vec[i])))
}
school <- data.frame(cbind(list.zip.vec,p.low.school,p.high.school))
names(school) <- c('Zip','Low','High')
school$Low <- as.numeric(as.character(school$Low))
school$High <- as.numeric(as.character(school$High))
school$school.trend <- 'None'
school$school.trend[school$Low > school$High] <- 'High'
school$school.trend[school$High > school$Low] <- 'Low'
# for each zip, determine where pos or neg equity is trending - use listed properties
p.pos <- vector(mode="numeric",length(list.zip.vec))
p.neg <- vector(mode="numeric",length(list.zip.vec))
for (i in 1:length(list.zip.vec)) {
p.pos[i] <- (length(which(list$ZIP == list.zip.vec[i]
& list$pos.equity == 'Pos'))
/ length(which(list$ZIP == list.zip.vec[i])))
p.neg[i] <- (length(which(list$ZIP == list.zip.vec[i]
& list$pos.equity == 'Neg'))
/ length(which(list$ZIP == list.zip.vec[i])))
}
equity <- data.frame(cbind(list.zip.vec,p.pos,p.neg))
names(equity) <- c('Zip','Pos','Neg')
equity$Pos <- as.numeric(as.character(equity$Pos))
equity$Neg <- as.numeric(as.character(equity$Neg))
equity$equity.trend[equity$Pos > equity$Neg] <- 'Pos'
equity$equity.trend[equity$Neg > equity$Pos] <- 'Neg'
# for each zip, determine which home size is trending - use listed properties
p.small <- vector(mode="numeric",length(list.zip.vec))
p.medium <- vector(mode="numeric",length(list.zip.vec))
p.large <- vector(mode="numeric",length(list.zip.vec))
for (i in 1:length(list.zip.vec)) {
p.small[i] <- (length(which(list$ZIP == list.zip.vec[i]
& list$home.size == 'S'))
/ length(which(list$ZIP == list.zip.vec[i])))
p.medium[i] <- (length(which(list$ZIP == list.zip.vec[i]
& list$home.size == 'M'))
/ length(which(list$ZIP == list.zip.vec[i])))
p.large[i] <- (length(which(list$ZIP == list.zip.vec[i]
& list$home.size == 'L'))
/ length(which(list$ZIP == list.zip.vec[i])))
}
size <- data.frame(cbind(unlist.zip.vec,p.small,p.medium,p.large))
names(size) <- c('Zip','Small','Medium','Large')
size$Small <- as.numeric(as.character(size$Small))
size$Medium <- as.numeric(as.character(size$Medium))
size$Large <- as.numeric(as.character(size$Large))
size$size.trend[size$Small > size$Medium & size$Small > size$Large] <- 'S'
size$size.trend[size$Medium > size$Small & size$Medium > size$Large] <- 'M'
size$size.trend[size$Large > size$Medium & size$Large > size$Small] <- 'L'
# merge trends with lead thresholds
lead.thresholds <- merge(lead.thresholds,school,by="Zip")
lead.thresholds <- merge(lead.thresholds,size,by="Zip")
lead.thresholds <- merge(lead.thresholds,equity,by="Zip")
lead.thresholds$Low <- NULL
lead.thresholds$High <- NULL
lead.thresholds$Small <- NULL
lead.thresholds$Medium <- NULL
lead.thresholds$Large <- NULL
lead.thresholds$Pos <- NULL
lead.thresholds$Neg <- NULL
# create data frame of unlisted properties and relevant variables plus profile
#unlist$profile <- 'NONE'
#unlist$profile[unlist$retired==1] <- 'Retired'
#unlist$profile[unlist$young.couple==1] <- 'Young Couple'
unlist$profile[unlist$young.family==1] <- 'Young Family'
unlist$profile[unlist$school.age==1] <- 'School Age'
#unlist$profile[unlist$empty.nesters==1] <- 'Empty Nesters'  ##### updated this line 4/16/18
table(unlist$profile)
unlist$school <- 'NONE'
unlist$school[unlist$AVG_SCHOOL_SCORE %in% c(1,2,3)] <- 'Low'
unlist$school[unlist$AVG_SCHOOL_SCORE %in% c(4,5)] <- 'High'
unlisted <- data.frame(cbind(as.character(unlist$OBPROPID),as.character(unlist$ADDRLINE1),as.character(unlist$ADDRLINE2),
as.character(unlist$ADDRLOCALITY),as.character(unlist$ADDRCOUNTRYSUBD),unlist$ZIP,
unlist$BEDS,unlist$BATHSTOTAL,unlist$BLDGSIZE,unlist$AVMVALUE,
as.character(unlist$SALETRANSDATE),unlist$SALEAMT,as.character(unlist$Field_30),as.character(unlist$Field_31),
as.character(unlist$Field_60),as.character(unlist$Field_69),unlist$profile,unlist$school,unlist$home.size,unlist$pos.equity))
names(unlisted) <- c('Property Id','Address1','Address2','City','State','Zip','Beds','Baths','SQFT',
'AVM','Last Purchase Date','Last Purchase Price','Last Name','First Name','Phone1','Phone2',
'Profile','School','Size','Equity')
# merge leads list with silver, gold, platinum for each zip
# add pos equity, size and school trends
leads <- merge(unlisted,lead.thresholds,by=c("Profile","Zip"),all.x=TRUE)
leads$School.Trend <- 'N'
leads$School.Trend[leads$School == leads$school.trend] <- 'Y'
leads$Size.Trend <- 'N'
leads$Size.Trend[leads$Size == leads$size.trend] <- 'Y'
leads$Equity.Trend <- 'N'
leads$Equity.Trend[leads$Equity == leads$equity.trend] <- 'Y'
# create a data set of trending properties
trends <- subset(leads,is.na(leads$lead.type) | leads$Profile=="NONE")
trends$size.trend <- NULL
trends$equity.trend <- NULL
trends$school.trend <- NULL
trends <- merge(trends,school,by= "Zip")
trends <- merge(trends,equity,by= "Zip")
trends <- merge(trends,size,by= "Zip")
trends$School.Trend <- 'N'
trends$School.Trend[trends$School == trends$school.trend] <- 'Y'
trends$Size.Trend <- 'N'
trends$Size.Trend[trends$Size == trends$size.trend] <- 'Y'
trends$Equity.Trend <- 'N'
trends$Equity.Trend[trends$Equity == trends$equity.trend] <- 'Y'
trends <- subset(trends,trends$Size.Trend == 'Y' | trends$Equity.Trend == 'Y'
| trends$School.Trend == 'Y')
# leads with profile info
profile.leads <- subset(leads,!is.na(leads$lead.type))
# print ('subsetting based on leads$lead.type=="None" ')
# print (head(profile.leads,1))
# drop unneeded columns
profile.leads$p.all <- NULL
profile.leads$p.listed <- NULL
profile.leads$se <- NULL
profile.leads$school.trend <- NULL
profile.leads$size.trend <- NULL
profile.leads$equity.trend <- NULL
trends$p.all <- NULL
trends$p.listed <- NULL
trends$lead.type <- NULL
trends$se <- NULL
trends$school.trend <- NULL
trends$size.trend <- NULL
trends$equity.trend <- NULL
trends$Low <- NULL
trends$High <- NULL
trends$Pos <- NULL
trends$Neg <- NULL
trends$Small <- NULL
trends$Medium <- NULL
trends$Large <- NULL
thresh.file <- paste0('results/lead_thresholds_',list.zip.vec[1],'.csv')
leads.file <- paste0('results/profile_leads_',list.zip.vec[1],'.csv')
trends.file <- paste0('results/trends_',list.zip.vec[1],'.csv')
write.csv(lead.thresholds, file = "C:/Users/BParisi/Desktop/Logic Output Test/v1.1 Logic/Threshold/16Threshold.csv",row.names=FALSE)
write.csv(profile.leads, file = "C:/Users/BParisi/Desktop/Logic Output Test/v1.1 Logic/Leads/16Leads.csv",row.names=FALSE)
write.csv(trends, file = "C:/Users/BParisi/Desktop/Logic Output Test/v1.1 Logic/Trends/16Trends.csv",row.names=FALSE)
#write.csv(lead.thresholds, file = 'results/lead_thresholds.csv',row.names=FALSE)
#write.csv(profile.leads, file = 'results/profile_leads.csv',row.names=FALSE)
#write.csv(trends, file = 'results/trends.csv',row.names=FALSE)
#write.csv(lead.thresholds, file = '/home/goher/Datasets/results/lead_thresholds.csv',row.names=FALSE)
#write.csv(profile.leads, file = '/home/goher/Datasets/results/profile_leads.csv',row.names=FALSE)
#write.csv(trends, file = '/home/goher/Datasets/results/trends.csv',row.names=FALSE)
library(swirl)
swirl()
swirl()
adsf
skip()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
tapple(y, newClust,mean)
tapply(y, newClust,mean)
skip()
skip()
apply(distTmp2, 2, which.min)
skip()
tapply(x, newClust2,mean)
tapply(y, newClust2,mean)
finalCx
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame, centers =3)
skip()
skip()
skip()
skip()
skip()
skip()
library(knitr)
?hist
?mean
setwd("C:/Users/BParisi/Documents/R/Practice Projects/activity data/")
activitydata <- read.csv("C:/Users/BParisi/Documents/R/Practice Projects/activity data/activity.csv")
histogram <- hist(activitydata$steps)
?hist
histogram <- hist(activitydata$steps, main = "Histogram of # of Steps Taken per Day", xlab="Number of Steps", ylab="Count")
activitydata <- !is.na(activitydata)
histogram <- hist(activitydata$steps, main = "Histogram of # of Steps Taken per Day", xlab="Number of Steps", ylab="Count")
activitydata <- read.csv("C:/Users/BParisi/Documents/R/Practice Projects/activity data/activity.csv")
histogram <- hist(activitydata$steps, main = "Histogram of # of Steps Taken per Day", xlab="Number of Steps", ylab="Count")
avgsteps <- mean(activitydata$steps)
medsteps <- median(activitydata$steps)
avgsteps
View(activitydata)
activitydata <- read.csv("C:/Users/BParisi/Documents/R/Practice Projects/activity data/activity.csv")
View(activitydata)
activitydata <- read.csv("C:/Users/BParisi/Documents/R/Practice Projects/activity data/activity.csv")
CleanedData <- activtydata[!is.na(activitydata$steps,)]
CleanedData <- activitydata[!is.na(activitydata$steps,)]
CleanedData <- activitydata[!is.na(activitydata$steps),]
histogram <- hist(CleanedData$steps, main = "Histogram of # of Steps Taken per Day", xlab="Number of Steps", ylab="Count")
histogram
plot(histogram)
histogram <- hist(CleanedData$steps, main = "Histogram of # of Steps Taken per Day", xlab="Number of Steps", ylab="Count")
plot(histogram)
plot(histogram, main = "Histogram of # of Steps Taken per Day", xlab="Number of Steps", ylab="Count"))
plot(histogram, main = "Histogram of # of Steps Taken per Day", xlab="Number of Steps", ylab="Count")
?plot
?hist
histogram <- hist(CleanedData, breaks = 1000)
histogram <- hist(CleanedData, breaks = c(1000))
histogram <- hist(CleanedData)
histogram <- hist(CleanedData$steps, breaks=1000)
plot(histogram, main = "Histogram of # of Steps Taken per Day", xlab="Number of Steps", ylab="Count")
histogram <- hist(CleanedData$steps, breaks=10)
plot(histogram, main = "Histogram of # of Steps Taken per Day", xlab="Number of Steps", ylab="Count")
?hist
View(CleanedData)
library(tidyverse)
